{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Atom web portal documentation This site provides documentation on how to generate the HTML pages for the Portal for High-Precision Atomic Data and Computation. The site can be reached at https://www1.udel.edu/atom","title":"Introduction"},{"location":"#welcome-to-atom-web-portal-documentation","text":"This site provides documentation on how to generate the HTML pages for the Portal for High-Precision Atomic Data and Computation. The site can be reached at https://www1.udel.edu/atom","title":"Welcome to Atom web portal documentation"},{"location":"BaII_html/","text":"Usage guide This guide shows users how to generate the matrix elements (BaII.html), transition rates (BaIITranAuto.html), and \"all\" transition rates (BaIITranFull.html) HTML pages using Ba + as an example. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Python3 Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the TransitionManualInput.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython TransitionManualInput.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), followed by a series of print statements. These prints show the result of comparison between the Python and Fortran77 error formats and a check for duplicated errors, which would throw a warning if found. See image below. The HTML files will be saved into the \"ElementsHTMLs\" folder. Jupyter notebook The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below A message will appear after the \"%run -i LoadInElement.py\" line asking for the name of the element. Type in using the format BaII, Cs, CaII, etc. Several warnings will print out below that, but these do not interfere with the running of the code. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Ba<sup>+</sup> TR, ME, HTMLs generation"},{"location":"BaII_html/#usage-guide","text":"This guide shows users how to generate the matrix elements (BaII.html), transition rates (BaIITranAuto.html), and \"all\" transition rates (BaIITranFull.html) HTML pages using Ba + as an example. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook.","title":"Usage guide"},{"location":"BaII_html/#python3","text":"Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the TransitionManualInput.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython TransitionManualInput.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), followed by a series of print statements. These prints show the result of comparison between the Python and Fortran77 error formats and a check for duplicated errors, which would throw a warning if found. See image below. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Python3"},{"location":"BaII_html/#jupyter-notebook","text":"The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below A message will appear after the \"%run -i LoadInElement.py\" line asking for the name of the element. Type in using the format BaII, Cs, CaII, etc. Several warnings will print out below that, but these do not interfere with the running of the code. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Jupyter notebook"},{"location":"Cs_other/","text":"Usage guide This guide shows users how to generate the Other data (CsOther.html) HTML pages using Cs as an example.Note that if you are running an ion use \"BeII\" format. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Python3 Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the OtherData.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython OtherData.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), and a statement if there is or is not metastable data. See image below. The HTML file will be saved into the \"ElementsHTMLs\" folder. Jupyter notebook The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below At the prompt type in the element name, using the format BaII, Cs, CaII, etc. The HTML file will be saved into the \"ElementsHTMLs\" folder.","title":"Cs Other HTML generation"},{"location":"Cs_other/#usage-guide","text":"This guide shows users how to generate the Other data (CsOther.html) HTML pages using Cs as an example.Note that if you are running an ion use \"BeII\" format. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook.","title":"Usage guide"},{"location":"Cs_other/#python3","text":"Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the OtherData.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython OtherData.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), and a statement if there is or is not metastable data. See image below. The HTML file will be saved into the \"ElementsHTMLs\" folder.","title":"Python3"},{"location":"Cs_other/#jupyter-notebook","text":"The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below At the prompt type in the element name, using the format BaII, Cs, CaII, etc. The HTML file will be saved into the \"ElementsHTMLs\" folder.","title":"Jupyter notebook"},{"location":"about/","text":"About Us Atom Development Team Marianna Safronova University of Delaware (Physics and Astronomy) Theoretical atomic physics Website : http://www.physics.udel.edu/~msafrono/ Email : msafrono@udel.edu Rudolf Eigenmann University of Delaware (Electrical Engineering/ Computer Science) High-performance computing, Cyberinfrastructure Website : https://www.eecis.udel.edu/~eigenman Email : eigenman@udel.edu Bindiya Arora Guru Nanak Dev University, India (Physics) Fundamental and quantum physics, Theory Website : https://www.bindiyaarora.in/ Email : bindiya.phy@gndu.ac.in Parinaz Barakhshan University of Delaware (Computer Engineering) High-performance computing, Programming methodologies Website : https://sites.udel.edu/parinazb/ Email : parinazb@udel.edu Adam Marrs University of Delaware (Physics and Astronomy) Predictive modeling, Machine learning Website : https://web.physics.udel.edu/about/directory/graduate-student/adam-marrs Email : marrs@udel.edu Contact us atom-feedback@udel.edu","title":"About the Team"},{"location":"about/#about-us","text":"","title":"About Us"},{"location":"about/#atom-development-team","text":"Marianna Safronova University of Delaware (Physics and Astronomy) Theoretical atomic physics Website : http://www.physics.udel.edu/~msafrono/ Email : msafrono@udel.edu Rudolf Eigenmann University of Delaware (Electrical Engineering/ Computer Science) High-performance computing, Cyberinfrastructure Website : https://www.eecis.udel.edu/~eigenman Email : eigenman@udel.edu Bindiya Arora Guru Nanak Dev University, India (Physics) Fundamental and quantum physics, Theory Website : https://www.bindiyaarora.in/ Email : bindiya.phy@gndu.ac.in Parinaz Barakhshan University of Delaware (Computer Engineering) High-performance computing, Programming methodologies Website : https://sites.udel.edu/parinazb/ Email : parinazb@udel.edu Adam Marrs University of Delaware (Physics and Astronomy) Predictive modeling, Machine learning Website : https://web.physics.udel.edu/about/directory/graduate-student/adam-marrs Email : marrs@udel.edu","title":"Atom Development Team"},{"location":"about/#contact-us","text":"atom-feedback@udel.edu","title":"Contact us"},{"location":"data/","text":"Installation Subdirectories for data used All data folders need to be in the same directory as the codes are. The folders at this level are: Data ElementsHTMLS Experimental_Data Format_csvs OtherData Data Folder contains energies and Fortran77 values (transition rates, errors, matrix elements, etc.) Files are: nist_urls.csv All other files are stored in their own folder in the Data directory. -Element subdirectories Every element needs its own sub-folder, named in this convention: \"Cs\", \"BaII\", \"Fr\". These are located in \"Data\" as subdirectories. Using BaII as an example, the folder should have these files: databaseBaII.txt datapolBaII.txt rates1.txt rates2.txt replace.txt summary_rates.txt Format_csvs These folders store the styling for the various HTML pages. These stylings are split into the intro formatting, formatting in-between data tables, and the formatting at the end. Folders are: MatrixEle TransitionRates OtherData -MatrixEle This houses the formatting for the matrix element (Ra.html). Files are (Using Ra as example): Intro_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt RaIIMatButtons.txt Every element needs its own MatButtons.txt file. The intro and ending html is the same for these files, but the specific list of buttons is uinque to each element and has to be manually put in. There is only one file each for the intro, excel_to_main, and End formattings. Changing one of these will change the format for every matrix element page. -TransitionRates This houses the formatting for the transition rates (BeTranAuto.html) pages. Files are (Using Be as example): Intro_to_life_formatting.txt Life_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt BeIIButtonList.txt This follows the same format and guidelines as MatrixEle files. Folders used: All_states -All_states This houses the formatting for the page that displays all transition rates at once (BeTranFull.html). Files are: Intro_to_table_formatting.txt End_formatting.txt -OtherData This houses the formatting for the OtherData (CsOther.html) pages. Files are: Intro_to_nuclear.txt Nuclear_to_hyperfine.txt Hyperfine_to_metastable1.txt Hyperfine_to_metastableNoExp.txt Metastable1_to_2.txt End_formatting.txt These pages have more tables, which splits the formatting further. The Hyperfine_to_metastableNoExp is used in place of Hyperfine_to_metastable1 only when an element does not have a second metastable data table. ElementsHTMLS This is the folder where all the HTML files are saved to. There are saved in the format (using \"Fr\" as an example): Fr.html FrTranAuto.html FrTranFull.html FrOther.html for the matrix elements, transition rates, \"all\" page for transition rates, and other data pages respectively. Ions are saved in \"CaII\" format. Experimental_Data Files, using \"Ca\" as example: Ca+-lifetimes.csv Ca+-matrix-elements.csv Key-File.csv Key file contains references with key and DOI. Need to have lifetimes and matrix element file for every element with experimental values. OtherData Files, using \"Ba\" as example: Metastable_elements.txt Metastable_key.xlsx KEY-hyperfine.xlsx Nuclear-data.xlsx BaII_Metastable_csv.csv Ba+_hyperfine.xlsx Metastable_elements is a manually generated txt file with a list of elements with metastable properties. Metastable key has references, keys, and DOIs.Key-hyperfine has references, keys, DOIs. Metastable_csv files were manually created: opened original metastable .xlsx file, saved the different elements in that excel file to their own csv file. Future versions could potentially have excel not joined together at creation, removing need for this. Ion hyperfine files have '+' format instead of 'II' format.","title":"Required Data"},{"location":"data/#installation","text":"","title":"Installation"},{"location":"data/#subdirectories-for-data-used","text":"All data folders need to be in the same directory as the codes are. The folders at this level are: Data ElementsHTMLS Experimental_Data Format_csvs OtherData","title":"Subdirectories for data used"},{"location":"data/#data","text":"Folder contains energies and Fortran77 values (transition rates, errors, matrix elements, etc.) Files are: nist_urls.csv All other files are stored in their own folder in the Data directory.","title":"Data"},{"location":"data/#-element-subdirectories","text":"Every element needs its own sub-folder, named in this convention: \"Cs\", \"BaII\", \"Fr\". These are located in \"Data\" as subdirectories. Using BaII as an example, the folder should have these files: databaseBaII.txt datapolBaII.txt rates1.txt rates2.txt replace.txt summary_rates.txt","title":"-Element subdirectories"},{"location":"data/#format_csvs","text":"These folders store the styling for the various HTML pages. These stylings are split into the intro formatting, formatting in-between data tables, and the formatting at the end. Folders are: MatrixEle TransitionRates OtherData","title":"Format_csvs"},{"location":"data/#-matrixele","text":"This houses the formatting for the matrix element (Ra.html). Files are (Using Ra as example): Intro_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt RaIIMatButtons.txt Every element needs its own MatButtons.txt file. The intro and ending html is the same for these files, but the specific list of buttons is uinque to each element and has to be manually put in. There is only one file each for the intro, excel_to_main, and End formattings. Changing one of these will change the format for every matrix element page.","title":"-MatrixEle"},{"location":"data/#-transitionrates","text":"This houses the formatting for the transition rates (BeTranAuto.html) pages. Files are (Using Be as example): Intro_to_life_formatting.txt Life_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt BeIIButtonList.txt This follows the same format and guidelines as MatrixEle files. Folders used: All_states","title":"-TransitionRates"},{"location":"data/#-all_states","text":"This houses the formatting for the page that displays all transition rates at once (BeTranFull.html). Files are: Intro_to_table_formatting.txt End_formatting.txt","title":"-All_states"},{"location":"data/#-otherdata","text":"This houses the formatting for the OtherData (CsOther.html) pages. Files are: Intro_to_nuclear.txt Nuclear_to_hyperfine.txt Hyperfine_to_metastable1.txt Hyperfine_to_metastableNoExp.txt Metastable1_to_2.txt End_formatting.txt These pages have more tables, which splits the formatting further. The Hyperfine_to_metastableNoExp is used in place of Hyperfine_to_metastable1 only when an element does not have a second metastable data table.","title":"-OtherData"},{"location":"data/#elementshtmls","text":"This is the folder where all the HTML files are saved to. There are saved in the format (using \"Fr\" as an example): Fr.html FrTranAuto.html FrTranFull.html FrOther.html for the matrix elements, transition rates, \"all\" page for transition rates, and other data pages respectively. Ions are saved in \"CaII\" format.","title":"ElementsHTMLS"},{"location":"data/#experimental_data","text":"Files, using \"Ca\" as example: Ca+-lifetimes.csv Ca+-matrix-elements.csv Key-File.csv Key file contains references with key and DOI. Need to have lifetimes and matrix element file for every element with experimental values.","title":"Experimental_Data"},{"location":"data/#otherdata","text":"Files, using \"Ba\" as example: Metastable_elements.txt Metastable_key.xlsx KEY-hyperfine.xlsx Nuclear-data.xlsx BaII_Metastable_csv.csv Ba+_hyperfine.xlsx Metastable_elements is a manually generated txt file with a list of elements with metastable properties. Metastable key has references, keys, and DOIs.Key-hyperfine has references, keys, DOIs. Metastable_csv files were manually created: opened original metastable .xlsx file, saved the different elements in that excel file to their own csv file. Future versions could potentially have excel not joined together at creation, removing need for this. Ion hyperfine files have '+' format instead of 'II' format.","title":"OtherData"},{"location":"functions/","text":"Necessary scripts Codes All the codes can be found at https://github.com/Marrs-jin/WebDesign2 Necessary scripts: TransitionManualInput.py modsigfig.py To_HTML_CSV.py OtherData.py LoadInElement.py LoadFunctions.py Format_save_copy.py Master1.py To use jupyter notebook functionality the .ipynb versions of the above codes is necessary. I.e. 'TransitionManualInput.ipynb'","title":"Required Functions"},{"location":"functions/#necessary-scripts","text":"","title":"Necessary scripts"},{"location":"functions/#codes","text":"All the codes can be found at https://github.com/Marrs-jin/WebDesign2 Necessary scripts: TransitionManualInput.py modsigfig.py To_HTML_CSV.py OtherData.py LoadInElement.py LoadFunctions.py Format_save_copy.py Master1.py To use jupyter notebook functionality the .ipynb versions of the above codes is necessary. I.e. 'TransitionManualInput.ipynb'","title":"Codes"},{"location":"master/","text":"Usage guide This guide shows users how to generate all the HTML pages at once (matrix elements, transition rates, all transition rates, other data). Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Note that the Master1 script has the list of elements it will run through. Modify the variable \"element_list\" if this needs to be changed. Python3 Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the Master1.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython Master1.py into the command line. See image below A series of warning messages will display, the same as if an element was run individually. The code will automatically kill the run if an error is encountered. Depending on the computer being used, this script will take approximately 9 minutes. The HTML files will be saved into the \"ElementsHTMLs\" folder. Jupyter notebook The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the Master1.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"All HTMLs generation"},{"location":"master/#usage-guide","text":"This guide shows users how to generate all the HTML pages at once (matrix elements, transition rates, all transition rates, other data). Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Note that the Master1 script has the list of elements it will run through. Modify the variable \"element_list\" if this needs to be changed.","title":"Usage guide"},{"location":"master/#python3","text":"Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the Master1.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython Master1.py into the command line. See image below A series of warning messages will display, the same as if an element was run individually. The code will automatically kill the run if an error is encountered. Depending on the computer being used, this script will take approximately 9 minutes. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Python3"},{"location":"master/#jupyter-notebook","text":"The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the Master1.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Jupyter notebook"},{"location":"python/","text":"Installation Python3 To run the code Python3 is needed. Users can download Python3 at https://www.python.org/downloads/ Once Python is installed, install IPython. IPython is a command shell for interactive Python computing. It can be downloaded with the command pip install ipython To run the code you will need to be in the directory where the scripts and data folders are located. Required libraries: numpy pandas xlsxwriter decimal re sympy (old) sortedcontainers warnings Most of the required libraries come with Anaconda at https://www.anaconda.com/products/individual Otherwise, after Python installation run the command pip install [library] For example, \"pip install pandas\". Pip is already installed if you are using a current version of Python. Jupyter notebook Download jupyter at https://jupyter.org/install Jupyter notebook is the way all the code used here was written. It is why the .py files have '# In[1]:' in them. Also included are the .ipynb files, which are jupyter notebooks. If jupyter notebook is installed, these files can be open and run instead of the .py files.","title":"Python"},{"location":"python/#installation","text":"","title":"Installation"},{"location":"python/#python3","text":"To run the code Python3 is needed. Users can download Python3 at https://www.python.org/downloads/ Once Python is installed, install IPython. IPython is a command shell for interactive Python computing. It can be downloaded with the command pip install ipython To run the code you will need to be in the directory where the scripts and data folders are located. Required libraries: numpy pandas xlsxwriter decimal re sympy (old) sortedcontainers warnings Most of the required libraries come with Anaconda at https://www.anaconda.com/products/individual Otherwise, after Python installation run the command pip install [library] For example, \"pip install pandas\". Pip is already installed if you are using a current version of Python.","title":"Python3"},{"location":"python/#jupyter-notebook","text":"Download jupyter at https://jupyter.org/install Jupyter notebook is the way all the code used here was written. It is why the .py files have '# In[1]:' in them. Also included are the .ipynb files, which are jupyter notebooks. If jupyter notebook is installed, these files can be open and run instead of the .py files.","title":"Jupyter notebook"},{"location":"videos/","text":"","title":"Video guide"}]}
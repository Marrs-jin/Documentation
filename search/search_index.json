{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Atom web portal documentation This site provides documentation on how to generate the HTML pages for the Portal for High-Precision Atomic Data and Computation. The site can be reached at https://www1.udel.edu/atom Flowchart","title":"Introduction"},{"location":"#welcome-to-atom-web-portal-documentation","text":"This site provides documentation on how to generate the HTML pages for the Portal for High-Precision Atomic Data and Computation. The site can be reached at https://www1.udel.edu/atom","title":"Welcome to Atom web portal documentation"},{"location":"#flowchart","text":"","title":"Flowchart"},{"location":"BaII_html/","text":"Usage guide This guide shows users how to generate the matrix elements (BaII.html), transition rates (BaIITranAuto.html), and \"all\" transition rates (BaIITranFull.html) HTML pages using Ba + as an example. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Python3 Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the TransitionManualInput.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython TransitionManualInput.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), followed by a series of print statements. These prints show the result of comparison between the Python and Fortran77 error formats and a check for duplicated errors, which would throw a warning if found. See image below. The HTML files will be saved into the \"ElementsHTMLs\" folder. Jupyter notebook Another method to run the code and receive the same results is through Jupyter Notebook. The next steps show how to use this method instead of the method described above. The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. This is the same directory as shown in the first image for the \"Python3\" method above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below A message will appear after the \"%run -i LoadInElement.py\" line asking for the name of the element. Type in using the format BaII, Cs, CaII, etc. Several warnings will print out below that, but these do not interfere with the running of the code. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Ba<sup>+</sup> TR, ME, HTMLs generation"},{"location":"BaII_html/#usage-guide","text":"This guide shows users how to generate the matrix elements (BaII.html), transition rates (BaIITranAuto.html), and \"all\" transition rates (BaIITranFull.html) HTML pages using Ba + as an example. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook.","title":"Usage guide"},{"location":"BaII_html/#python3","text":"Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the TransitionManualInput.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython TransitionManualInput.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), followed by a series of print statements. These prints show the result of comparison between the Python and Fortran77 error formats and a check for duplicated errors, which would throw a warning if found. See image below. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Python3"},{"location":"BaII_html/#jupyter-notebook","text":"Another method to run the code and receive the same results is through Jupyter Notebook. The next steps show how to use this method instead of the method described above. The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. This is the same directory as shown in the first image for the \"Python3\" method above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below A message will appear after the \"%run -i LoadInElement.py\" line asking for the name of the element. Type in using the format BaII, Cs, CaII, etc. Several warnings will print out below that, but these do not interfere with the running of the code. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Jupyter notebook"},{"location":"Cs_other/","text":"Usage guide This guide shows users how to generate the Other data (CsOther.html) HTML pages using Cs as an example.Note that if you are running an ion use \"BeII\" format. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Python3 Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the OtherData.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython OtherData.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), and a statement if there is or is not metastable data. See image below. The HTML file will be saved into the \"ElementsHTMLs\" folder. Jupyter notebook Another method to run the code and receive the same results is through Jupyter Notebook. The next steps show how to use this method instead of the method described above. The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. This is the same directory as shown in the first image for the \"Python3\" method above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below At the prompt type in the element name, using the format BaII, Cs, CaII, etc. The HTML file will be saved into the \"ElementsHTMLs\" folder.","title":"Cs Other HTML generation"},{"location":"Cs_other/#usage-guide","text":"This guide shows users how to generate the Other data (CsOther.html) HTML pages using Cs as an example.Note that if you are running an ion use \"BeII\" format. Shown first is the version using only command line inputs, shown second is using Jupyter Notebook.","title":"Usage guide"},{"location":"Cs_other/#python3","text":"Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the OtherData.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython OtherData.py into the command line. Next there will be a prompt asking for the element to run. Type in using the format BaII, Cs, CaII, etc. Only one element can be run at a time. See image below A series of warning messages will display (these are mostly pandas index caveat warnings), and a statement if there is or is not metastable data. See image below. The HTML file will be saved into the \"ElementsHTMLs\" folder.","title":"Python3"},{"location":"Cs_other/#jupyter-notebook","text":"Another method to run the code and receive the same results is through Jupyter Notebook. The next steps show how to use this method instead of the method described above. The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. This is the same directory as shown in the first image for the \"Python3\" method above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the TransitionManualInput.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below At the prompt type in the element name, using the format BaII, Cs, CaII, etc. The HTML file will be saved into the \"ElementsHTMLs\" folder.","title":"Jupyter notebook"},{"location":"about/","text":"About Us Atom Development Team Marianna Safronova University of Delaware (Physics and Astronomy) Theoretical atomic physics Website : http://www.physics.udel.edu/~msafrono/ Email : msafrono@udel.edu Rudolf Eigenmann University of Delaware (Electrical Engineering/ Computer Science) High-performance computing, Cyberinfrastructure Website : https://www.eecis.udel.edu/~eigenman Email : eigenman@udel.edu Bindiya Arora Guru Nanak Dev University, India (Physics) Fundamental and quantum physics, Theory Website : https://www.bindiyaarora.in/ Email : bindiya.phy@gndu.ac.in Parinaz Barakhshan University of Delaware (Computer Engineering) High-performance computing, Programming methodologies Website : https://sites.udel.edu/parinazb/ Email : parinazb@udel.edu Adam Marrs University of Delaware (Physics and Astronomy) Predictive modeling, Machine learning Website : https://web.physics.udel.edu/about/directory/graduate-student/adam-marrs Email : marrs@udel.edu Contact us atom-feedback@udel.edu","title":"About the Team"},{"location":"about/#about-us","text":"","title":"About Us"},{"location":"about/#atom-development-team","text":"Marianna Safronova University of Delaware (Physics and Astronomy) Theoretical atomic physics Website : http://www.physics.udel.edu/~msafrono/ Email : msafrono@udel.edu Rudolf Eigenmann University of Delaware (Electrical Engineering/ Computer Science) High-performance computing, Cyberinfrastructure Website : https://www.eecis.udel.edu/~eigenman Email : eigenman@udel.edu Bindiya Arora Guru Nanak Dev University, India (Physics) Fundamental and quantum physics, Theory Website : https://www.bindiyaarora.in/ Email : bindiya.phy@gndu.ac.in Parinaz Barakhshan University of Delaware (Computer Engineering) High-performance computing, Programming methodologies Website : https://sites.udel.edu/parinazb/ Email : parinazb@udel.edu Adam Marrs University of Delaware (Physics and Astronomy) Predictive modeling, Machine learning Website : https://web.physics.udel.edu/about/directory/graduate-student/adam-marrs Email : marrs@udel.edu","title":"Atom Development Team"},{"location":"about/#contact-us","text":"atom-feedback@udel.edu","title":"Contact us"},{"location":"data/","text":"Location Data are generated through a variety of sources and stored in several folders. These folders are located in the same directory that all the Python scripts are saved at. Subdirectories for data used All data folders need to be in the same directory as the codes are. The folders at this level are: Data ElementsHTMLS Experimental_Data Format_csvs OtherData Data stores the energy values and matrix elements used to calculate the transition rates for every element. Specific data for each element are stored in a subdirectory in Data named after the element, for example \"Data/Cs\" ElementsHTMLS is the folder the final HTML files are saved in. Experimental_Data has the manually generated experimental data values for every element. Also included are the reference key files. Format_csvs has the HTML stylings and button lists for the HTML pages. These are split into subdirectories based on the type of page, for example \"MatrixEle\" or \"OtherData\". OtherData has the metastable, hyperfine, and nuclear data for all elements. Also included are the reference key files. Note that metastable states have to be saved in an excel file unique to the element as opposed to a combined file. Data Folder contains nist_urls.csv, which stores the URLs for the NIST page of the element. These URLs are used in the \"ASD\" button on the HTML page. Files are: nist_urls.csv Energies and matrix elements values are stored in folders within the Data folder named after the element in use, i.e. \"Cs\" or \"BaII\". -Element subdirectories (\"Data/BaII\") Every element needs its own sub-folder, named in this convention: \"Cs\", \"BaII\", \"Fr\". These are located in \"Data\" as subdirectories. These folders need three files: datapol, rates1, and rates2. Using BaII as an example, the folder should have these files in this naming convention: datapolBaII.txt rates1.txt rates2.txt datapol has the matrix element values, wavelengths, and errors. This is used to calculate transition properties. rates1 has the transition rates, branching ratios, etc. with their errors. This is used in comparison with the Python code to calculate errors to ensure the same result was obtained. rates2 has the lifetimes with errors. This is used in comparison with the Python code to calculate errors to ensure the same result was obtained. Format_csvs These folders store the styling for the various HTML pages. Each type of page (transition rate, matrix element, page with all the transition rates, other data) has its own unique styling. These stylings are stored in separate folders. Stylings are split within a folder. For example, there is an \"intro_formatting\" for most pages that covers the read in of required libraries and any formatting before data tables. There is often styling in-between data tables, which is also saved as a separate txt files. Pages also have an \"End_formatting\" or similar file that controls any javascript functions used and any formatting after all tabular data is saved. The sub-folders these styles are saved in are listed below. Folders are: MatrixEle TransitionRates OtherData Descriptions for these folders are given below. -MatrixEle (\"Format_csvs/MatrixEle\") This houses the formatting for the matrix element HTML pages. Matrix element pages are saved in the format Ra.html, CaII.html. There are four necessary files for matrix element styling. These files are (Using Ra as example): Intro_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt RaIIMatButtons.txt Intro_to_excel_formatting loads in bootstrap (default styles) libraries, css styles, and function libraries. It also has all the styling before data tables are loaded in, which includes the menu bar and the list of buttons among other things. The Excel_to_main_formatting controls the styling in-between the data table that is downloaded on the \"excel\" button click and the data table that is shown on the portal. End_formatting controls the styling to close the HTML file as well as functions for sorting on button clicks. RaIIMatButtons is the unique list of buttons for the Ra + matrix element page. Every element loads in the same Intro_to_excel_formatting, Excel_to_main_formatting, and End_formatting files, but has their own MatButtons txt file. If a user wishes to change the way the matrix elements pages look, they should change one of these files (excluding the MatButtons file). Any change in one of these files will affect the matrix elements HTML pages for every element, and may require changes in the string substitution section of TransitionManualInput.py. See code explanations for more detail. -TransitionRates (\"Format_csvs/TranstionRates\") This houses the formatting for the transition rates HTML pages. Transition rates pages are saved in the format FrTranAuto.html, BeIITranAuto.html. There are five necessary files for a single element's transtition rate styling. These files are (Using Be as example): Intro_to_life_formatting.txt Life_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt BeIIButtonList.txt This follows the same format and guidelines as MatrixEle files. Life_to_excel_formatting controls the styling between the lifetime data table and the data table downloaded after clicking \"excel\". Excel_to_main_formatting controls the styling in-between the data table that is downloaded on the \"excel\" button click and the data table that is shown on the portal. The ButtonList needed for an element on its transition rates page is different than the button list needed for its matrix elements page, so a different txt file is necessary. If a user wishes to change the way the transition rate pages look, they should change one of these files (excluding the ButtonList file). Any change in one of these files will affect the transition rates HTML pages for every element, and may require changes in the string substitution section of TransitionManualInput.py. See code explanations for more detail. There is a sub-folder in this folder that houses the styling files for the \"all\" page of transition rates. The \"all\" page is the HTML file that is displayed when a user clicks on the \"all\" button for some element's transition rates. This page has its own unique styling and is stored in its own folder. Folders used: All_states -All_states (\"Format_csvs/TransitionRates/All_states\") This houses the formatting for the pages that display all transition rates of an element at once. These pages are saved in the format BeIITranFull.html, LiTranFull.html. There are two necessary files for this styling, listed below. There are no element-unique files for the \"all\" states since no button list is used. Files necessary are: Intro_to_table_formatting.txt End_formatting.txt These files follow the same usage as in the transition rate and matrix element pages. -OtherData (\"TransitionRates/OtherData\") This houses the formatting for the other data HTML page for an element. These pages are saved in the form NaOther.html, CaIIOther.html. There are more styling files in this folder due to the increased number of data tables. There is required formatting between the end of any one data table and the beginning of another. There are no styling files that are unique for an element- all elements share the same files. Necessary files are: Intro_to_nuclear.txt Nuclear_to_hyperfine.txt Hyperfine_to_metastable1.txt Hyperfine_to_metastableNoExp.txt Metastable1_to_2.txt End_formatting.txt Intro_to_nuclear and End_formatting follow the same style as for matrix element and transition rate pages. Nuclear_to_hyperfine has the styling between the nuclear data and the hyperfine constants A data. Hyperfine_to_metastable1 has the styling between the hyperfine data and the metastable data table with columns \"State, Property, Theory, Experiment\". Metastable1_to_2 has the styling between the metastable table listed above and the metastable table with columns \"Initial, Final, Transition, Wavelength, Matrix element, Units, Transition rate, Branching ratio\". Hyperfine_to_metastableNoExp is used in place of Hyperfine_to_metastable1 only when an element does not have a second metastable data table. ElementsHTMLS This is the folder where all the HTML files are saved to. There are saved in the format (using \"Fr\" as an example): Fr.html FrTranAuto.html FrTranFull.html FrOther.html X.html is the matrix element page, where X is the element. XTranAuto.html is the transition rate page with buttons for sorting which transitions are shown (the main transition rate page). XTranFull.html is the transition rate page displayed when a user clicks the \"all\" button on a main transition rate page. XOther.html is the other data page. Ions are saved in the format, using Ca + as an example, of: CaII.html, CaIITranAuto, etc. Experimental_Data Files, using \"Ca\" as example: Ca+-lifetimes.csv Ca+-matrix-elements.csv Key-File.csv Key file contains references with key and DOI. Need to have lifetimes and matrix element file for every element with experimental values. OtherData Files, using \"Ba\" as example: Metastable_elements.txt Metastable_key.xlsx KEY-hyperfine.xlsx Nuclear-data.xlsx BaII_Metastable_csv.csv Ba+_hyperfine.xlsx Metastable_elements is a manually generated txt file with a list of elements with metastable properties. Metastable key has references, keys, and DOIs.Key-hyperfine has references, keys, DOIs. Metastable_csv files were manually created: opened original metastable .xlsx file, saved the different elements in that excel file to their own csv file. Future versions could potentially have excel not joined together at creation, removing need for this. Ion hyperfine files have '+' format instead of 'II' format.","title":"Required Data"},{"location":"data/#location","text":"Data are generated through a variety of sources and stored in several folders. These folders are located in the same directory that all the Python scripts are saved at.","title":"Location"},{"location":"data/#subdirectories-for-data-used","text":"All data folders need to be in the same directory as the codes are. The folders at this level are: Data ElementsHTMLS Experimental_Data Format_csvs OtherData Data stores the energy values and matrix elements used to calculate the transition rates for every element. Specific data for each element are stored in a subdirectory in Data named after the element, for example \"Data/Cs\" ElementsHTMLS is the folder the final HTML files are saved in. Experimental_Data has the manually generated experimental data values for every element. Also included are the reference key files. Format_csvs has the HTML stylings and button lists for the HTML pages. These are split into subdirectories based on the type of page, for example \"MatrixEle\" or \"OtherData\". OtherData has the metastable, hyperfine, and nuclear data for all elements. Also included are the reference key files. Note that metastable states have to be saved in an excel file unique to the element as opposed to a combined file.","title":"Subdirectories for data used"},{"location":"data/#data","text":"Folder contains nist_urls.csv, which stores the URLs for the NIST page of the element. These URLs are used in the \"ASD\" button on the HTML page. Files are: nist_urls.csv Energies and matrix elements values are stored in folders within the Data folder named after the element in use, i.e. \"Cs\" or \"BaII\".","title":"Data"},{"location":"data/#-element-subdirectories-databaii","text":"Every element needs its own sub-folder, named in this convention: \"Cs\", \"BaII\", \"Fr\". These are located in \"Data\" as subdirectories. These folders need three files: datapol, rates1, and rates2. Using BaII as an example, the folder should have these files in this naming convention: datapolBaII.txt rates1.txt rates2.txt datapol has the matrix element values, wavelengths, and errors. This is used to calculate transition properties. rates1 has the transition rates, branching ratios, etc. with their errors. This is used in comparison with the Python code to calculate errors to ensure the same result was obtained. rates2 has the lifetimes with errors. This is used in comparison with the Python code to calculate errors to ensure the same result was obtained.","title":"-Element subdirectories (\"Data/BaII\")"},{"location":"data/#format_csvs","text":"These folders store the styling for the various HTML pages. Each type of page (transition rate, matrix element, page with all the transition rates, other data) has its own unique styling. These stylings are stored in separate folders. Stylings are split within a folder. For example, there is an \"intro_formatting\" for most pages that covers the read in of required libraries and any formatting before data tables. There is often styling in-between data tables, which is also saved as a separate txt files. Pages also have an \"End_formatting\" or similar file that controls any javascript functions used and any formatting after all tabular data is saved. The sub-folders these styles are saved in are listed below. Folders are: MatrixEle TransitionRates OtherData Descriptions for these folders are given below.","title":"Format_csvs"},{"location":"data/#-matrixele-format_csvsmatrixele","text":"This houses the formatting for the matrix element HTML pages. Matrix element pages are saved in the format Ra.html, CaII.html. There are four necessary files for matrix element styling. These files are (Using Ra as example): Intro_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt RaIIMatButtons.txt Intro_to_excel_formatting loads in bootstrap (default styles) libraries, css styles, and function libraries. It also has all the styling before data tables are loaded in, which includes the menu bar and the list of buttons among other things. The Excel_to_main_formatting controls the styling in-between the data table that is downloaded on the \"excel\" button click and the data table that is shown on the portal. End_formatting controls the styling to close the HTML file as well as functions for sorting on button clicks. RaIIMatButtons is the unique list of buttons for the Ra + matrix element page. Every element loads in the same Intro_to_excel_formatting, Excel_to_main_formatting, and End_formatting files, but has their own MatButtons txt file. If a user wishes to change the way the matrix elements pages look, they should change one of these files (excluding the MatButtons file). Any change in one of these files will affect the matrix elements HTML pages for every element, and may require changes in the string substitution section of TransitionManualInput.py. See code explanations for more detail.","title":"-MatrixEle (\"Format_csvs/MatrixEle\")"},{"location":"data/#-transitionrates-format_csvstranstionrates","text":"This houses the formatting for the transition rates HTML pages. Transition rates pages are saved in the format FrTranAuto.html, BeIITranAuto.html. There are five necessary files for a single element's transtition rate styling. These files are (Using Be as example): Intro_to_life_formatting.txt Life_to_excel_formatting.txt Excel_to_main_formatting.txt End_formatting.txt BeIIButtonList.txt This follows the same format and guidelines as MatrixEle files. Life_to_excel_formatting controls the styling between the lifetime data table and the data table downloaded after clicking \"excel\". Excel_to_main_formatting controls the styling in-between the data table that is downloaded on the \"excel\" button click and the data table that is shown on the portal. The ButtonList needed for an element on its transition rates page is different than the button list needed for its matrix elements page, so a different txt file is necessary. If a user wishes to change the way the transition rate pages look, they should change one of these files (excluding the ButtonList file). Any change in one of these files will affect the transition rates HTML pages for every element, and may require changes in the string substitution section of TransitionManualInput.py. See code explanations for more detail. There is a sub-folder in this folder that houses the styling files for the \"all\" page of transition rates. The \"all\" page is the HTML file that is displayed when a user clicks on the \"all\" button for some element's transition rates. This page has its own unique styling and is stored in its own folder. Folders used: All_states","title":"-TransitionRates (\"Format_csvs/TranstionRates\")"},{"location":"data/#-all_states-format_csvstransitionratesall_states","text":"This houses the formatting for the pages that display all transition rates of an element at once. These pages are saved in the format BeIITranFull.html, LiTranFull.html. There are two necessary files for this styling, listed below. There are no element-unique files for the \"all\" states since no button list is used. Files necessary are: Intro_to_table_formatting.txt End_formatting.txt These files follow the same usage as in the transition rate and matrix element pages.","title":"-All_states (\"Format_csvs/TransitionRates/All_states\")"},{"location":"data/#-otherdata-transitionratesotherdata","text":"This houses the formatting for the other data HTML page for an element. These pages are saved in the form NaOther.html, CaIIOther.html. There are more styling files in this folder due to the increased number of data tables. There is required formatting between the end of any one data table and the beginning of another. There are no styling files that are unique for an element- all elements share the same files. Necessary files are: Intro_to_nuclear.txt Nuclear_to_hyperfine.txt Hyperfine_to_metastable1.txt Hyperfine_to_metastableNoExp.txt Metastable1_to_2.txt End_formatting.txt Intro_to_nuclear and End_formatting follow the same style as for matrix element and transition rate pages. Nuclear_to_hyperfine has the styling between the nuclear data and the hyperfine constants A data. Hyperfine_to_metastable1 has the styling between the hyperfine data and the metastable data table with columns \"State, Property, Theory, Experiment\". Metastable1_to_2 has the styling between the metastable table listed above and the metastable table with columns \"Initial, Final, Transition, Wavelength, Matrix element, Units, Transition rate, Branching ratio\". Hyperfine_to_metastableNoExp is used in place of Hyperfine_to_metastable1 only when an element does not have a second metastable data table.","title":"-OtherData (\"TransitionRates/OtherData\")"},{"location":"data/#elementshtmls","text":"This is the folder where all the HTML files are saved to. There are saved in the format (using \"Fr\" as an example): Fr.html FrTranAuto.html FrTranFull.html FrOther.html X.html is the matrix element page, where X is the element. XTranAuto.html is the transition rate page with buttons for sorting which transitions are shown (the main transition rate page). XTranFull.html is the transition rate page displayed when a user clicks the \"all\" button on a main transition rate page. XOther.html is the other data page. Ions are saved in the format, using Ca + as an example, of: CaII.html, CaIITranAuto, etc.","title":"ElementsHTMLS"},{"location":"data/#experimental_data","text":"Files, using \"Ca\" as example: Ca+-lifetimes.csv Ca+-matrix-elements.csv Key-File.csv Key file contains references with key and DOI. Need to have lifetimes and matrix element file for every element with experimental values.","title":"Experimental_Data"},{"location":"data/#otherdata","text":"Files, using \"Ba\" as example: Metastable_elements.txt Metastable_key.xlsx KEY-hyperfine.xlsx Nuclear-data.xlsx BaII_Metastable_csv.csv Ba+_hyperfine.xlsx Metastable_elements is a manually generated txt file with a list of elements with metastable properties. Metastable key has references, keys, and DOIs.Key-hyperfine has references, keys, DOIs. Metastable_csv files were manually created: opened original metastable .xlsx file, saved the different elements in that excel file to their own csv file. Future versions could potentially have excel not joined together at creation, removing need for this. Ion hyperfine files have '+' format instead of 'II' format.","title":"OtherData"},{"location":"flowchart/","text":"Flowchart","title":"Flowchart"},{"location":"flowchart/#flowchart","text":"","title":"Flowchart"},{"location":"functions/","text":"Necessary scripts Codes All the codes can be found at https://github.com/Marrs-jin/WebDesign2 To generate the HTML files for \"transition rates\" and \"matrix elements\" pages for a single element, the only code that will be run by the user is TransitionManualInput.py. This code pulls in several other codes as it is running. To generate the HTML file for the \"other data\" page for a single element, the only code that will be run by the user is OtherData.py. This code pulls in several other codes as it is running. To generate the HTML files for \"transition rates\", \"matrix elements\", and \"other data\" pages for all elements, the only code that will be run by the user is Master1.py. This code pulls in several other codes as it is running. A full list of all Python scripts that will be needed for the functionality of making any HTML page is provided below. Necessary scripts: TransitionManualInput.py modsigfig.py To_HTML_CSV.py OtherData.py LoadInElement.py LoadFunctions.py Format_save_copy.py Master1.py Running these codes is possible through the Ipython command in the command line, e.g. ipython TransitionManualInput.py Users also have the option to run codes using the Jupyter Notebook interactive environment. In this case the files have the same names but the extension .ipynb replaces .py. For example \"TransitionManualInput.ipynb\". These codes are run after entering the Jupyter shell through the jupyter notebook command, navigating to the script you wish to run, and running all cells. See the examples for more information.","title":"Required Functions"},{"location":"functions/#necessary-scripts","text":"","title":"Necessary scripts"},{"location":"functions/#codes","text":"All the codes can be found at https://github.com/Marrs-jin/WebDesign2 To generate the HTML files for \"transition rates\" and \"matrix elements\" pages for a single element, the only code that will be run by the user is TransitionManualInput.py. This code pulls in several other codes as it is running. To generate the HTML file for the \"other data\" page for a single element, the only code that will be run by the user is OtherData.py. This code pulls in several other codes as it is running. To generate the HTML files for \"transition rates\", \"matrix elements\", and \"other data\" pages for all elements, the only code that will be run by the user is Master1.py. This code pulls in several other codes as it is running. A full list of all Python scripts that will be needed for the functionality of making any HTML page is provided below. Necessary scripts: TransitionManualInput.py modsigfig.py To_HTML_CSV.py OtherData.py LoadInElement.py LoadFunctions.py Format_save_copy.py Master1.py Running these codes is possible through the Ipython command in the command line, e.g. ipython TransitionManualInput.py Users also have the option to run codes using the Jupyter Notebook interactive environment. In this case the files have the same names but the extension .ipynb replaces .py. For example \"TransitionManualInput.ipynb\". These codes are run after entering the Jupyter shell through the jupyter notebook command, navigating to the script you wish to run, and running all cells. See the examples for more information.","title":"Codes"},{"location":"master/","text":"Usage guide This guide shows users how to generate all the HTML pages at once (matrix elements, transition rates, all transition rates, other data). Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Note that the Master1 script has the list of elements it will run through. Modify the variable \"element_list\" if this needs to be changed. Python3 Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the Master1.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython Master1.py into the command line. See image below A series of warning messages will display, the same as if an element was run individually. The code will automatically kill the run if an error is encountered. Depending on the computer being used, this script will take approximately 9 minutes. The HTML files will be saved into the \"ElementsHTMLs\" folder. Jupyter notebook The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the Master1.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"All HTMLs generation"},{"location":"master/#usage-guide","text":"This guide shows users how to generate all the HTML pages at once (matrix elements, transition rates, all transition rates, other data). Shown first is the version using only command line inputs, shown second is using Jupyter Notebook. Note that the Master1 script has the list of elements it will run through. Modify the variable \"element_list\" if this needs to be changed.","title":"Usage guide"},{"location":"master/#python3","text":"Open command prompt. Navigate to the directory with the functions and data folders. The image below shows an example of this directory on a local computer. See that all the scripts are in the current directory, and the \"Data\", \"Experimental_Data\" etc. folders are present. Run the Master1.py script however you run Python scripts. Shown here is the IPython method, by typing in ipython Master1.py into the command line. See image below A series of warning messages will display, the same as if an element was run individually. The code will automatically kill the run if an error is encountered. Depending on the computer being used, this script will take approximately 9 minutes. The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Python3"},{"location":"master/#jupyter-notebook","text":"The next steps assume Jupyter Notebook is installed. Navigate to the directory with the functions and data folders. See the image for the Python3 section above. Open Jupyter Notebook with the command jupyter notebook Depending on user settings, a new tab will automatically open on their browser. If not, navigate to the URL provided (often localhost:8888) in a browser. The user may need to input a password they have created or use the token that was printed in the command line. The correct display is shown in the image below Navigate to the Master1.ipynb script and click to open it. At the top menu click on \"Kernel\", then \"Restart and Run All\". See image below The HTML files will be saved into the \"ElementsHTMLs\" folder.","title":"Jupyter notebook"},{"location":"python/","text":"Installation Python3 To run the code Python3 is needed. Users can download Python3 at https://www.python.org/downloads/ Once Python is installed, install IPython. IPython is a command shell for interactive Python computing. It can be downloaded by opening the command prompt (for example on Windows by typing \"cmd\" in the search bar) and entering the command pip install ipython Pip installations on Windows are by default done globably, so it does not matter in which directory you install it. If you are using a virtual machine you will need to run this command at the location of where the codes are stored. IPython is necessary to run the scripts if you do not wish to use Jupyter Notebook. To run the HTML generation code you will need to be in the directory where the scripts and data folders are located. Required libraries: numpy pandas xlsxwriter decimal re sympy (old) sortedcontainers warnings Most of the required libraries come with Anaconda at https://www.anaconda.com/products/individual Otherwise, after Python installation run the command pip install [library] For example, \"pip install pandas\". Pip is already installed if you are using a current version of Python. Jupyter notebook If you would prefer to use the Jupyter editor over command line prompts, you can download Jupyter Notebook at https://jupyter.org/install Jupyter notebooks are interactive coding environments allowing for instantaneous modification of specific blocks of code. They require an internet connection to run. Jupyter is the environment in which all the code was written, so certain aspects of the files will be more intuitive if viewed in this editor. It is why the .py files have lines like '# In[1]:' included: these were breaks in the Jupyter Notebook cell structure which do not impact the actual running of the code. All code can be run in using only IPython and working in the command line however. Also included are the .ipynb files, which are Jupyter Notebooks. If Jupyter Notebook is installed, these files can be open and run instead of the .py files.","title":"Python"},{"location":"python/#installation","text":"","title":"Installation"},{"location":"python/#python3","text":"To run the code Python3 is needed. Users can download Python3 at https://www.python.org/downloads/ Once Python is installed, install IPython. IPython is a command shell for interactive Python computing. It can be downloaded by opening the command prompt (for example on Windows by typing \"cmd\" in the search bar) and entering the command pip install ipython Pip installations on Windows are by default done globably, so it does not matter in which directory you install it. If you are using a virtual machine you will need to run this command at the location of where the codes are stored. IPython is necessary to run the scripts if you do not wish to use Jupyter Notebook. To run the HTML generation code you will need to be in the directory where the scripts and data folders are located. Required libraries: numpy pandas xlsxwriter decimal re sympy (old) sortedcontainers warnings Most of the required libraries come with Anaconda at https://www.anaconda.com/products/individual Otherwise, after Python installation run the command pip install [library] For example, \"pip install pandas\". Pip is already installed if you are using a current version of Python.","title":"Python3"},{"location":"python/#jupyter-notebook","text":"If you would prefer to use the Jupyter editor over command line prompts, you can download Jupyter Notebook at https://jupyter.org/install Jupyter notebooks are interactive coding environments allowing for instantaneous modification of specific blocks of code. They require an internet connection to run. Jupyter is the environment in which all the code was written, so certain aspects of the files will be more intuitive if viewed in this editor. It is why the .py files have lines like '# In[1]:' included: these were breaks in the Jupyter Notebook cell structure which do not impact the actual running of the code. All code can be run in using only IPython and working in the command line however. Also included are the .ipynb files, which are Jupyter Notebooks. If Jupyter Notebook is installed, these files can be open and run instead of the .py files.","title":"Jupyter notebook"},{"location":"upload/","text":"Uploading data to server This section details how to to push any changes to the live version of the web portal. Remote login Before accessing the site, users must either be at a UD IP address or remote login. To enable remote login follow the steps found here http://web.facilities.udel.edu/docs/technology/VPN.pdf Once these steps have been followed, open the Cisco AnyConnect Secure Mobility Client and log in using the user's UD credentials. The user will need an authenticator passcode. You can download an authenticator from the app store on your phone https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en_US&gl=US WinSCP The user will need to remote login to the portal. For windows, this can be done through WinSCP. Instructions on how to download WinSCP can be found here https://winscp.net/eng/index.php Once installed, open the WinSCP program. Fill out the forms in the following format: Host name : webdav.www.udel.edu User name : your UDel username, i.e. \"marrs\". Password : your UDel password. This should fill out the other forms, but if not put in: File Protocol : WebDAV Encryption : TLS/SSL Implicit encryption Port number : 443 This will login to the folder housing all the web portal's files. All the HTML files displayed on the site are stored in the main directory. To change a file, copy over the version on the local computer to the remote page. There is no need to navigate into any sub folders for changing the transition rate, matrix element, other data, or index pages. It is good practice before pushing large changes to save the old file before it is changed. There is an \"archive\" folder in the web portal directory that can store these HTML pages.","title":"Uploading to Site"},{"location":"upload/#uploading-data-to-server","text":"This section details how to to push any changes to the live version of the web portal.","title":"Uploading data to server"},{"location":"upload/#remote-login","text":"Before accessing the site, users must either be at a UD IP address or remote login. To enable remote login follow the steps found here http://web.facilities.udel.edu/docs/technology/VPN.pdf Once these steps have been followed, open the Cisco AnyConnect Secure Mobility Client and log in using the user's UD credentials. The user will need an authenticator passcode. You can download an authenticator from the app store on your phone https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en_US&gl=US","title":"Remote login"},{"location":"upload/#winscp","text":"The user will need to remote login to the portal. For windows, this can be done through WinSCP. Instructions on how to download WinSCP can be found here https://winscp.net/eng/index.php Once installed, open the WinSCP program. Fill out the forms in the following format: Host name : webdav.www.udel.edu User name : your UDel username, i.e. \"marrs\". Password : your UDel password. This should fill out the other forms, but if not put in: File Protocol : WebDAV Encryption : TLS/SSL Implicit encryption Port number : 443 This will login to the folder housing all the web portal's files. All the HTML files displayed on the site are stored in the main directory. To change a file, copy over the version on the local computer to the remote page. There is no need to navigate into any sub folders for changing the transition rate, matrix element, other data, or index pages. It is good practice before pushing large changes to save the old file before it is changed. There is an \"archive\" folder in the web portal directory that can store these HTML pages.","title":"WinSCP"},{"location":"videos/","text":"","title":"Video guide"}]}